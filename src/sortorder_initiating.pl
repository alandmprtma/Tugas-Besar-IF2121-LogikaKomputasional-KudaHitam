% ini bagian utk sorting order berdasarkan hasil dadu
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 2,
    diceResult(1, Result1),
    diceResult(2, Result2),
    Result1 > Result2, 
    asserta(turn_order([1,2])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 2,
    diceResult(1, Result1),
    diceResult(2, Result2),
    Result1 < Result2, 
    asserta(turn_order([2,1])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 3,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    Result1 > Result2, 
    Result2 > Result3,
    Result1 > Result3,
    asserta(turn_order([1,2,3])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 3,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    Result1 > Result2, 
    Result2 < Result3,
    Result1 > Result3,
    asserta(turn_order([1,3,2])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 3,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    Result1 < Result2, 
    Result2 > Result3,
    Result1 > Result3,
    asserta(turn_order([2,1,3])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 3,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    Result1 < Result2, 
    Result2 > Result3,
    Result1 < Result3,
    asserta(turn_order([2,3,1])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 3,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    Result1 > Result2, 
    Result2 < Result3,
    Result1 < Result3,
    asserta(turn_order([3,1,2])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 3,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    Result1 < Result2, 
    Result2 < Result3,
    Result1 < Result3,
    asserta(turn_order([3,2,1])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 > Result3,
    Result1 > Result4,
    Result2 > Result3,
    Result2 > Result4,
    Result3 > Result4,
    asserta(turn_order([1,2,3,4])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 > Result3,
    Result1 > Result4,
    Result2 > Result3,
    Result2 > Result4,
    Result3 < Result4,
    asserta(turn_order([1,2,4,3])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 > Result3,
    Result1 > Result4,
    Result2 < Result3,
    Result2 > Result4,
    Result3 > Result4,
    asserta(turn_order([1,3,2,4])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 > Result3,
    Result1 > Result4,
    Result2 < Result3,
    Result2 < Result4,
    Result3 > Result4,
    asserta(turn_order([1,3,4,2])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 > Result3,
    Result1 > Result4,
    Result2 > Result3,
    Result2 < Result4,
    Result3 < Result4,
    asserta(turn_order([1,4,2,3])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 > Result3,
    Result1 > Result4,
    Result2 < Result3,
    Result2 < Result4,
    Result3 < Result4,
    asserta(turn_order([1,4,3,2])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 > Result3,
    Result1 > Result4,
    Result2 > Result3,
    Result2 > Result4,
    Result3 > Result4,
    asserta(turn_order([2,1,3,4])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 > Result3,
    Result1 > Result4,
    Result2 > Result3,
    Result2 > Result4,
    Result3 < Result4,
    asserta(turn_order([2,1,4,3])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 < Result3,
    Result1 > Result4,
    Result2 > Result3,
    Result2 > Result4,
    Result3 > Result4,
    asserta(turn_order([2,3,1,4])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 < Result3,
    Result1 < Result4,
    Result2 > Result3,
    Result2 > Result4,
    Result3 > Result4,
    asserta(turn_order([2,3,4,1])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 > Result3,
    Result1 < Result4,
    Result2 > Result3,
    Result2 > Result4,
    Result3 < Result4,
    asserta(turn_order([2,4,1,3])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 < Result3,
    Result1 < Result4,
    Result2 > Result3,
    Result2 > Result4,
    Result3 < Result4,
    asserta(turn_order([2,4,3,1])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 < Result3,
    Result1 > Result4,
    Result2 < Result3,
    Result2 > Result4,
    Result3 > Result4,
    asserta(turn_order([3,1,2,4])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 < Result3,
    Result1 > Result4,
    Result2 < Result3,
    Result2 < Result4,
    Result3 > Result4,
    asserta(turn_order([3,1,4,2])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 < Result3,
    Result1 > Result4,
    Result2 < Result3,
    Result2 > Result4,
    Result3 > Result4,
    asserta(turn_order([3,2,1,4])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 < Result3,
    Result1 < Result4,
    Result2 < Result3,
    Result2 > Result4,
    Result3 > Result4,
    asserta(turn_order([3,2,4,1])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 < Result3,
    Result1 < Result4,
    Result2 < Result3,
    Result2 < Result4,
    Result3 > Result4,
    asserta(turn_order([3,4,1,2])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 < Result3,
    Result1 < Result4,
    Result2 < Result3,
    Result2 < Result4,
    Result3 > Result4,
    asserta(turn_order([3,4,2,1])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 > Result3,
    Result1 < Result4,
    Result2 > Result3,
    Result2 < Result4,
    Result3 < Result4,
    asserta(turn_order([4,1,2,3])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 > Result3,
    Result1 < Result4,
    Result2 < Result3,
    Result2 < Result4,
    Result3 < Result4,
    asserta(turn_order([4,1,3,2])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 > Result3,
    Result1 < Result4,
    Result2 > Result3,
    Result2 < Result4,
    Result3 < Result4,
    asserta(turn_order([4,2,1,3])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 < Result3,
    Result1 < Result4,
    Result2 > Result3,
    Result2 < Result4,
    Result3 < Result4,
    asserta(turn_order([4,2,3,1])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 > Result2, 
    Result1 < Result3,
    Result1 < Result4,
    Result2 < Result3,
    Result2 < Result4,
    Result3 < Result4,
    asserta(turn_order([4,3,1,2])).
sortOrder :-
    player_count(PlayerCount),
    PlayerCount == 4,
    diceResult(1, Result1),
    diceResult(2, Result2),
    diceResult(3, Result3),
    diceResult(4, Result4),
    Result1 < Result2, 
    Result1 < Result3,
    Result1 < Result4,
    Result2 < Result3,
    Result2 < Result4,
    Result3 < Result4,
    asserta(turn_order([4,3,2,1])).
